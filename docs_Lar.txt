//BASIC
  config->app.php
  'debug' => env('APP_DEBUG', true), //thay thế thành true để bật lỗi

//ROUTING
	Route::get('/view', function () { //cơ bản
		//echo 'Hello';
		$ten = 'kaka';
		return view('welcome' ,compact('ten'));// return ra trực típ view và có truyền biến
	});

	Route::get('/view', 'NameController@NameFunction'); //sử dụng controller kế bên function
	
	Route::get('view1/{mon_hoc?}',function($mon_hoc='kkk'){ // truyền gt mặc định ko có cũng được
		return $mon_hoc;
	});
	Route::get('view/{mon_hoc}/{tt}',function($mon_hoc ,$tt){ // truyền trên route
		return $mon_hoc.'/'.$tt;
	});
	Route::get('view/{mon_hoc}/{tt}',function($mon_hoc ,$tt){ // truyền trên route
		return $mon_hoc.'/'.$tt;
	})->where(['mon_hoc'=>'']);
	
	Route::get('user/{id}/{name}', function ($id, $name) { //ràng buộc biến trên route
		return 'okok';
	})
	->where(['id' => '[0-9]+', 'name' => '[a-z]+']);
	Route::get('user', ['as'=>'us' ,function(){ //tạo định danh riêng cho url 
	    return 'okok';
	}]);//trong con troller gọi "return redirect()->route('us');"
	Route::group(['prefix'=>'admin'],function(){//group gt các url trong group
		Route::get('ad1',function(){
			return 'ad1';
		});
		Route::get('ad2',function(){ 
			return 'ad2';
		});
	});
	Route::get('url/full' ,function(){ //lấy url hiện tại đang xài
		return URL::full();
	});
	
	Route::get('url/full' ,function(){ //lấy url tại thư mục gốc và gán thêm đuôi
		return URL::asset();
	});
	
	Route::get('to' ,function(){ //lấy url tại thư mục gốc và gán thêm đuôi
		return URL::to('thong-tin',['thanh','01222222']);
	});
	
	Route::get('to' ,function(){
		return secure_url('thong-tin',['thanh','01222222']);//lấy url tại thư mục gốc và gán thêm đuôi nhưng xài cho link https
	});
	
	Route::any('{all?}' ,'NameController@NameFunction')->where('all','(.*)');//khi user vào link bậy bạ thì mặc định sẽ vào route này
    
	//cấu hình đường dẫn Restful Controller( ko phải API)
	Route::resource('photo', 'PhotoController',
                ['only' => ['index', 'create', 'edit']]);chỉ xài các 'controller' này để xử lý request api
	
	//Các kiểu 'controller' xử lý api 
	GET	       /photo              || index  ||	photo.index
	GET	       /photo/create       || create || photo.create
	POST       /photo              || store  || photo.store
	GET	       /photo/{photo}      || show   || photo.show
	GET	       /photo/{photo}/edit || edit   || photo.edit
	PUT/PATCH  /photo/{photo}      || update || photo.update
	DELETE	   /photo/{photo}	   || destroy||	photo.destroy
	{photo} //giá trị truyền trên url 
    
//VIEW

    fordel resources->views->ten_view.blade.php //tên đường dẫn vào view (thưc mục gốc)
	render view('fordel1.fordel2.file');//fordel1->fordel2->file.blade.php
	note: search view share Laravel để tìm cách gán biến cho tất cả các view
	note: search view composer Laravel để tìm cách gán biến cho các view đã được chỉ định
	view()->exists('welcome') //KT view có tồn tại hay ko ra true or false
	
//VIEW blade (ten_file.blade.php)
    //layout cha
	@yield('noi_dung') //phần sẽ inclu vào từ layout con
	@yield('title')
	@section('sidebar') //phần iclu từ layout con vẫn giữ gt trong thẻ và cho chồng thêm
        This is the master sidebar.
    @show
	
	//layout con
	@extends('master')//kế thừa từ layout cha tên là 'master.blade.php'
	@section('title','Master111') //gán giá trị cho biến mức đơn giản 
	@section('noi_dung') //gán giá trị cho biến mức iclu view
		<h1>wasaaa</h1>
	@stop

	@section('sidebar')
		@parent // muốn kế thừa phần 'section('sidebar')' ở trên thì thêm biến này vào
		This is the master sidebar.
	@stop
	
	{{ '<b>Show</b>' }} :show lun giá trị có html
	{!! '<b>Show</b>' !!} :ko show gt html
	
	@if() //cách viết toán tử đơn giản trong view
	@endif
	@for()
	@endfor
	{!! $name or 'tao' !!}//KT isset nếu ko có show ra 'tao'
	
	{{-- ghi chu --}} //ghi chú hoặc ko muốn show ra các giá trị ko muốn
	
	
	
//VIEW URL
    
	các file js ,css để trong folder public -> ten.js or public -> ten.css
	<link rel="stylesheet" type="text/css" href="{{ asset('public/hh.css') }}"> //inclu đường dẫn từ thư mục gốc
    <link rel="stylesheet" type="text/css" href="{{ asset('public/hh.css' ,true) }}"> //thêm true nếu link là https
	Hoặc
	<link href="{{ url('public/hh.css') }}" rel="stylesheet">
	<script src="{{ url('public/ckeditor.js') }}"></script>
	//các link điều hướng khi xóa ,sửa
	<a href="{!! URL::route('admin.cate.getDelete', $gt['id']) !!}">Edit</a>//bên view
	Route::get('delete/{id}',['as'=>'admin.cate.getDelete','uses'=>'CateController@getDelete']);
	
//SCO = Shift + chuột phải -> ‘Opne command window here’

//INCLU
    //inclue trong view
    @include('nhung') //inclu vào view 
	@include('nhung', ['some' => 'data Lar']) //inclu vào view kèm biến 'some'
	@include('admin.blocks.erros'); //truyền file từ resources->views->admin->blocks->erros.blade.php
	 
    //Thêm fucntion or class
	Vào file ‘composer.json’ tìm ‘autoload’ thêm vào link file muốn add vào VD xem ở file ‘composer.json’ 
	/*
		"files": [
			"app/KhoaPham/functions.php"//đường dẫn file
		]
	*/
	Sau đó SCO gõ ‘php composer.phar dump-autoload’ để chạy lại dữ liệu(lưu ý phải có file composer.phar mới chạy được)
    changeTitle($request->txtName); //lấy ra xài bt

//DB
	**connection DB** 
	Tìm file ‘.env.example’ rồi xóa đuôi ‘.example’ đi nếu đã có file ‘.env’ r thì xóa luôn 
	Fix lại DB trong file ‘.env’ như VD
	/*
		DB_CONNECTION=mysql 
		DB_HOST=localhost //tên host
		DB_PORT=3306
		DB_DATABASE=project_laravel //tên DB
		DB_USERNAME=root //username
		DB_PASSWORD= //pass
	*/
	Vào config->database.php truyền thông số DB như VD trên
	Lưu ý phần ‘'default' => env('DB_CONNECTION', 'mysql'),’ là lựa chọn kiểu DB truyền ‘mySql’ 
	SCO gõ ‘php artisan migrate’ để xem kết nói DB có chuẩn hay chưa
	Nếu ko nữa chừng bị lỗi SCO gõ ’php artisan config:clear’ xong chạy lại 
	Nếu thành công sẽ tạo ra các table trong DB

	Nếu ko được thử cách sau 
	Trước khi KT kết nối ta tìm file AppServiceProvider.php sửa code thành
	/*
	use Illuminate\Support\Facades\Schema;thêm vào
	public function boot()
	{
		Schema::defaultStringLength(191);//thêm vào
	}*/
	
	Note: Search 'Schema Laravel' hoặc 'Schema Laravel KhoaPham' để tìm cách viết và chỉnh sửa table bằng code  
    Note: Search 'Migration Laravel' hoặc 'Migration Laravel KhoaPham' để tìm cách viết và chỉnh sửa table bằng code nhưng viết trong 1 class theo qui định
//Model
Model để trong fordel App->ten_model.php
    
	Vào folder database->seeds->DatabaseSeeder.php viết vào function run để test db ('seeding laravel')
	VD:
    /*
		public function run()
		{
			DB::table('test_db')->insert([
				'gia' => str_random(10),
				'ten' => str_random(10).'@gmail.com',
				'ghi_chu' => 'aaa',
			]);
		}
	*/
    xong gõ lệnh chạy SCO: 'php artisan db:seed' để chạy function run or 'php artisan db:seed --class=UserTableSeeder' với 'UserTableSeeder' tên class mà ta tạo
  
    'php artisan make:model User' //cách tạo model tên User
	Sau khi tạo xong nó sẽ xuất hiện trong Folder App->Ten_model.php
	Ta thêm các dòng lệnh này trong class  
	/*
		protected $table = 'test_db'; //tên table muốn gán vào
		public $timestamps = false; //có 2 cột date ta thêm vào để tránh truy xuất nó
		protected $fillable = ['ten','gia','ghi_chu']; //các cột mà ta muốn truy cập
		protected $hidden = ['id'];  //các cột mà ta muốn ẩn đi
	*/
	
	<!-- Cấu trúc khi gọi model -->
	App\TenModel::all(); // truy xuất tất cả theo kiểu object
	App\TenModel::all()->toArray(); //kiểu mảng 
	App\TenModel::all()->tojSon(); //kiểu mảng 
	App\TenModel::all()->first(); //ra giá trị đầu tiên
	App\TenModel::all()->last(); //ra giá trị cuối cùng
	App\TenModel::all()->count();
	App\TenModel::find(id); //chỉ truyền được id vào để truy xuất nếu ko có ra Null
	App\TenModel::findOrFail(id);  //chỉ truyền được id vào để truy xuất ko có thì bào lỗi
	
	//khi where có thể truyền bình thường như các câu truy vấn và '->select()' nên truyền trước '->get()' và phải thêm '->get()'
	App\TenModel::where('id',1)->get(); //như trên nhưng truy vấn thêm where
	App\TenModel::where('id',1)->get()->toArray(); //ép kiểu
	App\TenModel::where('id',1)->take(2)->get()->toArray(); //lấy ra 2 dòng dữ liệu
	App\TenModel::whereRaw('id = ? and price = ?',[3,1000])->get(); //truyền truy vấn vào where
	
	//Save
	$flight = new Flight;
	$flight->name = 'ten';
	$flight->save();
	Hoặc
	$flight = App\Flight::create(['name' => 'Flight 10' ,'cate_id' => '10']);
	
	//UPDATE
	$flight = App\Flight::find(id); //truyền id vào
	$flight->name = 'New Flight Name';
	$flight->save();
	
	//DELETE
	$cate = Cate::find($id);
	$cate->delete($id);//truyền biến
	Hoặc
	App\Flight::destroy(id); //truyền id
	Hoặc
	$deletedRows = App\Flight::where('active', 0)->delete(); //truyền theo where
	//RELATIONSHIPS
	VD về viết các function quan hệ và nên viết ở 2 model muốn liên kết với nhau
	/*
		public function cate(){//tên table cần quan hệ
			return $this->belongTo('App\Cate');//tạo quan hệ ở mức con với 1 cha
		}
		public function product(){//tên table cần quan hệ
			return $this->hasMany('App\Product');//tạo quan hệ ở mức cha với nhiều con
		}
		public function roles()
		{
			return $this->belongsToMany('App\Role' ,'car_color'); //tạo quan hệ ở mức con với 1 or nhiều cha với table 'role' và 'car_color'
		}
	*/
	//sau khi tạo quan hệ có thể viết theo kiểu này để truy xuất table quan hệ	
	$flight = App\Flight::find(id)->cate()->get()->toArray(); //cate() : tên function quan hệ đã tạo trong model
	
//QUERY
    <!-- Các lệnh này sẽ cho ra kiểu object -->
	DB::select('select * from users where id = :id', ['id' => 1]); //viết query trực tiếp
	DB::insert('insert into users (id, name) values (?, ?)', [1, 'Dayle']); //viết query trực tiếp
	DB::update('update users set votes = 100 where name = ?', ['John']); //viết query trực tiếp
	DB::delete('delete from users');
	
    $db = DB::table('product')->get();//lấy hết dữ liệu
	$db = DB::table('product')->select('name')->get();//lấy hết dữ liệu kèm lệnh select
	
	//lấy hết dữ liệu kèm lệnh where nếu ko có ra mảng rỗng
	$db = DB::table('product')->select('name')->where('na',33)->get(); //mặc định where là '=' where('id',33)
	$db = DB::table('product')->select('name')->where('id','=',33)->orWhere('id',34)->get(); //VD về thêm dấu where('id','=',33)
	$db = DB::table('product')->select('name')->where('name','=',"'qqq'")->where('alias','=',"'qqq'")->get(); // where name = 'qqq' and alias = 'qqq'
    $db = DB::table('product')->whereIn('id', [1, 2, 3])->get(); //ra các phần tử có trong mảng
	$db = DB::table('product')->whereNotIn('id', [1, 2, 3])->get(); //ra các phần tử ko có trong mảng

	$db = DB::table('product')->whereBetween('id', [33, 36])->get();//id >= 33 and id <= 36
	$db = DB::table('product')->whereNotBetween('id', [33, 36])->get();//id <= 33 and id >= 36
	$db = DB::table('product')->whereNull('updated_at')->get();
	$db = DB::table('product')->whereNotNull('updated_at')->get();
	
	$db = DB::table('product')->count(); //đếm giá trị
	$db = DB::table('product')->max('id'); //ra giá trị của cột lớn nhất
	$db = DB::table('product')->min('id'); //ra giá trị của cột thấp nhất
	$db = DB::table('product')->where('id', 1)->avg('price');//ra giá trị trung bình của cột
	$db = DB::table('product')->where('id', 1)->sum('price');//ra tổng giá trị của cột
	
	//JOIN
	$db = DB::table('product')
            ->select('product.*')
            ->join('product_image', 'product.id', '=', 'product_image.product_id')
            ->join('orders', 'users.id', '=', 'orders.user_id') //bỏ dòng này nếu join 1 bảng
            ->get();
    
	//INSERT
	DB::table('users')->insert([
		['email' => 'taylor@example.com', 'votes' => 0],
		['email' => 'dayle@example.com', 'votes' => 0]
	]);
	
	$id = DB::table('users')->insertGetId( //insert 1 dòng dữ liệu để lấy giá trị id của chính dòng đó
		['email' => 'john@example.com', 'votes' => 0]
	);
	
	//UPDATE ra 1 nếu thành công
	$db = DB::table('test_db')
            ->where('id', 1)
            ->update(['gia' => 100 ,'ghi_chu' => 'eee']);
			
	//DELETE
	DB::table('users')->where('votes', '<', 100)->delete();
	
	//lấy hết dữ liệu kèm lệnh 'orderby' 
	$db = DB::table('product')->select('name')->orderBy('id')->get();// mặc định orderBy('id') ,khác orderBy('id' ,'desc')
    
	//lấy hết dữ liệu kèm lệnh 'limit'  
	$db = DB::table('product')->skip(10)->take(5)->get(); //lấy từ vị trí 10 và lấy 5 phần tử

//FORM
    //cách truyền dữ liệu từ form view sang con troller
	Route::get('add',['as'=>'admin.cate.getAdd','uses'=>'CateController@getAdd']);//từ route để show ra view
	Route::post('add',['as'=>'admin.cate.postAdd','uses'=>'CateController@postAdd']);//để submit gt kiểu 'post' về
	<form action="{!! route('admin.cate.getAdd') !!}" method="POST"> //từ form
	Hoặc
	<form action="{!! url('/admin/product/add') !!}" method="POST" enctype="multipart/form-data">
	
	<input type='hidden' name='_token' value="{!! csrf_token() !!}"/> //tạo biến bảo mật để ở trong form
	
	//cách submit form rồi xử lý dữ liệu(VD trong controller)
	/*
		public function postAdd(CateRequest $request){// lấy giá trị về
			$cate = new Cate();//khởi tạo class
			$cate->name = $request->txtCateName;//gán giá trị từng cột tương ứng input
			$cate->save();//tiến hành save
			return redirect()->route('admin.cate.getList');//điêu hướng trang sau khi save thành công
		}
    */
	
	//KT dữ liệu đầu vào
	Thêm dòng 'use Validator;' ngay trên đầu 'Controller'
	Viết các giá trị sau trong function của 'Controller'
	/*
		$validator = Validator::make($request->all(), [
			'txt_mon' => 'required|unique:ten_bang,ten_cot|max:255',
			'txt_body' => 'required',
			'txt_email' => 'email',
		],
		[
			'txt_mon.required' => 'Không được để trống',
			'txt_mon.unique' => 'Gía trị đã tồn tại',
			'txt_body.required' => 'Không được để trống',
			'txt_email.email' => 'Đây ko phải là email',
		]
		);
		if($validator->fails()){ //KT lỗi
			return redirect()->back->withErrors($validator->errors); //trở về ngay trang cũ và gán thêm gt cho biến báo lỗi
		}
	*/
	Nhớ thêm 'Use Hash;' trên đầu 'controller'
	Hash::make($str); //cách mã hóa kí tự như md5() của PHP
	
	//Tạo request
	'php artisan make:request ten_request' nó sẽ tạo file mới trong fordel app->fordel http->ten_request.php
	Viết cấu trúc sau trong file class vừa mới tạo
	/*
		public function rules()
		{
			return [
				'slt_parent' => 'required',
				'txtName' => 'required|unique:product,name',
				'fImages' => 'required|image|max:150',//image: KT xem có phải hình hay ko và kích thước tối đa của hình

			];
		}
		public function messages(){
			return[
				'slt_parent.required' => 'Please Choose Category',
				'txtName.required' => 'Please Enter Name Product',//thông báo theo từng thuộc tính
				'txtName.unique' => 'Product Name Is Exist',
				'fImages.required' => 'Product Choose Images',
				'fImages.image' => 'This File Is Not Images'
			];
		}
	*/
	Sau khi tạo thành công thêm dòng 'use App\Http\Requests\TenRequest;' vào 'controller' để sử dụng
	Khi submit về 'controller' thì đổi thành
	/*
		public function postAdd(TenRequest $request){// lấy giá trị về
			return redirect()->route('admin.cate.getList');//điêu hướng trang sau khi save thành công
		}
	*/
	
	//Upload File
	Cách lấy request file về 
	/*
		public function postAdd(Request $request){
			$file_name = $request->file('fImages')->getClientOriginalName();//lấy tên hình
			$file_size = $request->file('fImages')->getSize();//lấy size hình(KB)
			$product = new Product();
			$product->img = $file_name;
			$request->file('fImages')->move('resources/upload/',$file_name);//tải hình lên thư mục từ thư mục gốc đi vào
		}
	*/

//ERRORS
    CD về truyền thông báo lỗi đã thiết lập ở 'request' ,'Validator' ,'Validate'
    <?php 
        // xuất lỗi đã thiết lập ở request (TenRequest)
        if(count($errors) > 0){?>
            <div class='alert alert-danger'>
                <ul>
                    <?php foreach($errors->all() as $gt){?>
                    <li><?php echo $gt;?></li>
                    <?php }?>
                </ul>
            </div>
    <?php }?>
	{!! $errors->first('txt_tenbien') !!} //báo lỗi chính xác từng phần tử đã thiết lập ở 'controller' or 'request'

//RESPONSES(mã hóa chuổi)
    //VD về chuyển chuổi sang Json
    $arr = array('qqq' => 'qqq','www' => 'www','eee' => 'eee');
	Response::json($arr);
	//VD về chuyển sang XML
	$content = '<?xml version="1.0" encoding="UTF-8" ?>
	<root></root>
	';
	$status = 200;
	$value = 'text/xml';
	return response($content, $status)->header('Content-Type', $value);
	
//REDIRECT(chuyển hướng trang)

	return redirect('home/dashboard'); //truyền tên route đã tạo trước đó
	hoặc
	return redirect()->route('login')
	return redirect()->back();//trở về trang cũ
	
	//truyền thêm dữ liệu ,nó sẽ mất khi f5 lại
    return redirect('home/dashboard')->with(['level'=>'2' ,'message'=>'Success'1']);
	Bên view sẽ show ra như sau
	@if (session('level'))
		<div class="alert alert-success">
			{{ session('level') }}
		</div>
	@endif
	Hoặc
	<?php
		if(Session::has('flash_message')){?>
			<div class='alert alert-{!! Session::get("flash_level") !!}'>
				{!! Session::get('flash_message') !!} 
			</div>
	<?php }?>
	
	//Tải file từ yêu cầu người dùng
	$url = 'public/download/ten_file.img';
	return response()->download($url)->deleteFileAfterSend(true);//tải xong xóa lun file đó

//SERVICE PROVIDERS Note: search 'PROVIDERS laravel' để tìm hiểu

//AUTHENTICATION ràng buộc login và logout
    Phần đăng kí thì làm như phần save bình thường 
	
	//Phần login mặc định thì tài khoản là 'email' và mật khẩu là 'password' có thể chỉnh lại trong fordel config->auth.php
	//Khi xài Auth ở 'controller' khác 'AuthController' ta sẽ thêm 'Use Auth;'
	if (Auth::attempt(['email' => $email, 'password' => $password, 'lever' => $lever])){ //Kiểm tra TK ,MK và lever của user mà user login vào
		echo Auth::user()->name; //tạo session nếu thành công 
		echo $this->auth()->user()->name; //sử dụng cách này nếu cách trên ko được
	}
	if (Auth::check()){} //KT session trên có tồn tại hay không
	
	//Logout
	Auth::logout();
	
	
	
	
	
	
	